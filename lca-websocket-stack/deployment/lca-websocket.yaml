# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Amazon Transcribe Live Call Analytics with Agent Assist - Genesys Audiohook

Parameters:
  S3BucketName:
    Type: String
    Description: >
      Existing bucket where call recording files will be stored.
    # yamllint disable rule:line-length
    AllowedPattern: '( *|(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$))'
    # yamllint enable rule:line-length

  AudioFilePrefix:
    Type: String
    Default: lca-audio-recordings/
    Description: >-
      The Amazon S3 prefix where the merged output audio files will be saved (must end in "/")

  CallAnalyticsPrefix:
    Type: String
    Default: lca-call-analytics/
    Description: The Amazon S3 prefix where the post-call analytics files will be saved, when using analytics api mode (must end in "/")

  CallDataStreamName:
    Type: String
    Description: >-
      The Name of Kinesis Data Stream to write the call data to.

  CloudFrontPriceClass:
    Type: String
    Default: PriceClass_100
    Description: >-
      Specify the CloudFront price class. See https://aws.amazon.com/cloudfront/pricing/ for a
      description of each price class.
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
    ConstraintDescription: >-
      Allowed Price Classes PriceClass_100 PriceClass_200 and PriceClass_All

  TranscribeApiMode:
    Type: String
    Default: analytics
    AllowedValues:
      - standard
      - analytics
    Description: Set the default operational mode for Transcribe

  IsContentRedactionEnabled:
    Type: String
    Default: "false"
    Description: >-
      Enable content redaction from Amazon Transcribe transcription output. This is only used when
      the 'en-US' language is selected in the TranscribeLanguageCode parameter.
    AllowedValues:
      - "true"
      - "false"

  TranscribeContentRedactionType:
    Type: String
    Default: PII
    Description: >-
      Type of content redaction from Amazon Transcribe transcription output
    AllowedValues:
      - PII

  TranscribeLanguageCode:
    Type: String
    Description: >-
      Language code to be used for Amazon Transcribe
    Default: en-US
    AllowedValues:
      - en-US
      - es-US
      - en-GB
      - fr-CA
      - fr-FR
      - en-AU
      - it-IT
      - de-DE
      - pt-BR
      - ja-JP
      - ko-KR
      - zh-CN

  TranscribePiiEntityTypes:
    Type: String
    # yamllint disable rule:line-length
    Default: BANK_ACCOUNT_NUMBER,BANK_ROUTING,CREDIT_DEBIT_NUMBER,CREDIT_DEBIT_CVV,CREDIT_DEBIT_EXPIRY,PIN,EMAIL,ADDRESS,NAME,PHONE,SSN
    # yamllint enable rule:line-length
    Description: >-
      Select the PII entity types you want to identify or redact. Remove the values that you don't
      want to redact from the default.  DO NOT ADD CUSTOM VALUES HERE.

  CustomVocabularyName:
    Type: String
    Default: ''
    Description: >-
      The name of the vocabulary to use when processing the transcription job. Leave blank if no
      custom vocabulary to be used. If yes, the custom vocabulary must pre-exist in your account.

  CustomLanguageModelName:
    Type: String
    Default: ''
    Description: >-
      The name of the custom language model to use when processing the transcription job. Leave blank if no
      custom language model is to be used. If yes, the custom language model must pre-exist in your account.
  PcaS3BucketName:
    Type: String
    Description: >
      Value of PCA stack "InputBucket". Effective only Transcribe API Mode parameter is 'analytics'.
    # yamllint disable rule:line-length
    AllowedPattern: '( *|(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$))'
    # yamllint enable rule:line-length

  UserPoolId:
    Type: String
    Description: Cognito User Pool Id

  # NOTE: These parameters are dynamically updated during release
  BootstrapBucketBaseName:
    Type: String
    Default: ai-ml-blog
    Description: >
      Base name of bootstrap S3 bucket. The region is appended to the bucket name. For example if
      you provide a base name `mybucket`, a bucket with a region suffix must exist in the region
      you are deploying (e.g. `mybucket-us-east-1`)
      The bucket contains pre-staged packaged templates and source artifacts
    # yamllint disable rule:line-length
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
    # yamllint enable rule:line-length

  BootstrapS3Prefix:
    Type: String
    Default: artifacts/lca/lca-genesys-audiohook
    Description: >
      S3 prefix where the templates and source are stored under

  BootstrapVersion:
    Type: String
    Default: 0.2.1
    Description: >
      Artifacts version (semver). Used to point to a specific release in the S3
      bootstrap bucket

  WebSocketInstanceType:
    Description: Instance type to launch EC2 instances.
    Type: String
    Default: c6g.large
    AllowedValues: [c6g.medium, c6g.large, c6g.xlarge, c6g.2xlarge]
  WebSocketLatestImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/arm64/hvm/ebs-gp2/ami-id'

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: Amazon S3 Configuration
        Parameters:
          - S3BucketName
          - AudioFilePrefix
    ParameterLabels:
      S3BucketName:
        default: Call Audio Bucket Name
      AudioFilePrefix:
        default: Audio File Prefix
      IsContentRedactionEnabled:
        default: Enable Content Redaction
      TranscribeContentRedactionType:
        default: Type of Content Redaction
      TranscribeLanguageCode:
        default: Transcription Language Code
      TranscribePiiEntityTypes:
        default: Transcription PII Redaction Entity Types
      CustomVocabularyName:
        default: Transcription Custom Vocabulary Name
      CustomLanguageModelName:
        default: Transcription Custom Language Model Name

Conditions:
  ShouldInstallPcaIntegration: !Not [!Equals [!Ref PcaS3BucketName, '']]

Outputs:
  WebSocketEndpoint:
    Description: Websocket endpoint for Audiohook integration
    Value: !Join
              - ''
              - - 'wss://'
                - !GetAtt WebSocketCloudFrontDistribution.DomainName
                - '/api/v1'

Mappings:
  # aws ec2 describe-managed-prefix-lists  --region <REGION> | jq -r '.PrefixLists[] | select (.PrefixListName == "com.amazonaws.global.cloudfront.origin-facing") | .PrefixListId'
  AWSRegions2PrefixListID:
    ap-northeast-1:
      PrefixList: pl-58a04531
    ap-northeast-2:
      PrefixList: pl-22a6434b
    ap-northeast-3:
      PrefixList: pl-31a14458
    ap-south-1:
      PrefixList: pl-9aa247f3
    ap-southeast-1:
      PrefixList: pl-31a34658
    ap-southeast-2:
      PrefixList: pl-b8a742d1
    ca-central-1:
      PrefixList: pl-38a64351
    eu-central-1:
      PrefixList: pl-a3a144ca
    eu-north-1:
      PrefixList: pl-fab65393
    eu-west-1:
      PrefixList: pl-4fa04526
    eu-west-2:
      PrefixList: pl-93a247fa
    eu-west-3:
      PrefixList: pl-75b1541c
    sa-east-1:
      PrefixList: pl-5da64334
    us-east-1:
      PrefixList: pl-3b927c52
    us-east-2:
      PrefixList: pl-b6a144df
    us-west-1:
      PrefixList: pl-4ea04527
    us-west-2:
      PrefixList: pl-82a045eb

Resources:
  ##########################################################################
  # VPC
  ##########################################################################
  TranscribingVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default

  TranscribingVPCIGW:
    Type: AWS::EC2::InternetGateway

  TranscribingVPCVPCGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: TranscribingVPC
      InternetGatewayId:
        Ref: TranscribingVPCIGW

  VPCFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3653
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: >-
              By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch
              server-side encryption keys (AWS Managed Keys).
  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: >-
              "Allow Resource * for CloudWatch Logs API since the resources are customer defined."
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: "*"
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt "VPCFlowLogsRole.Arn"
      LogGroupName: !Ref "VPCFlowLogsLogGroup"
      ResourceId: !Ref "TranscribingVPC"
      ResourceType: VPC
      TrafficType: ALL

  TranscribingVPCPublicSubnet1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: TranscribingVPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
    DependsOn:
      - TranscribingVPCVPCGW
    
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: Public IP on launch is needed by the solution

  TranscribingVPCPublicSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: TranscribingVPC
    
  TranscribingVPCPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: TranscribingVPCPublicSubnet1RouteTable
      SubnetId:
        Ref: TranscribingVPCPublicSubnet1Subnet

  TranscribingVPCPublicSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: TranscribingVPCPublicSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: TranscribingVPCIGW
    DependsOn:
      - TranscribingVPCVPCGW

  TranscribingVPCPublicSubnet:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  TranscribingVPCPublicSubnet1NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - TranscribingVPCPublicSubnet
          - AllocationId
      SubnetId:
        Ref: TranscribingVPCPublicSubnet1Subnet

  TranscribingVPCPublicSubnet2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: TranscribingVPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
    DependsOn:
      - TranscribingVPCVPCGW
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: Public IP on launch is needed by the solution

  TranscribingVPCPublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: TranscribingVPC

  TranscribingVPCPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: TranscribingVPCPublicSubnet2RouteTable
      SubnetId:
        Ref: TranscribingVPCPublicSubnet2Subnet

  TranscribingVPCPublicSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: TranscribingVPCPublicSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: TranscribingVPCIGW
    DependsOn:
      - TranscribingVPCVPCGW

  TranscribingVPCPublicSubnet2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  TranscribingVPCPublicSubnet2NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - TranscribingVPCPublicSubnet2
          - AllocationId
      SubnetId:
        Ref: TranscribingVPCPublicSubnet2Subnet

  TranscribingVPCPrivateSubnet1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: TranscribingVPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false

  TranscribingVPCPrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: TranscribingVPC

  TranscribingVPCPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: TranscribingVPCPrivateSubnet1RouteTable
      SubnetId:
        Ref: TranscribingVPCPrivateSubnet1Subnet

  TranscribingVPCPrivateSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: TranscribingVPCPrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: TranscribingVPCPublicSubnet1NATGateway

  TranscribingVPCPrivateSubnet2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: TranscribingVPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false

  TranscribingVPCPrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: TranscribingVPC

  TranscribingVPCPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: TranscribingVPCPrivateSubnet2RouteTable
      SubnetId:
        Ref: TranscribingVPCPrivateSubnet2Subnet

  TranscribingVPCPrivateSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: TranscribingVPCPrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: TranscribingVPCPublicSubnet2NATGateway

  TranscribingAudiohookLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: 'false'
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
          - TranscribingAudiohookLoadBalancerSecurityGroup
          - GroupId
      Subnets:
        - !Ref TranscribingVPCPublicSubnet1Subnet
        - !Ref TranscribingVPCPublicSubnet2Subnet
      Type: application

  TranscribingAudiohookLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ELB  
      SecurityGroupIngress:
        - SourcePrefixListId: !FindInMap [AWSRegions2PrefixListID, !Ref 'AWS::Region', PrefixList]
          Description: Allow HTTP from com.amazonaws.global.cloudfront.origin-facing
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref TranscribingVPC
 
  TranscribingAudiohookLoadBalancerSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - TranscribingAudiohookLoadBalancerSecurityGroup
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - TranscriberServiceSecurityGroup
          - GroupId
      FromPort: 8080
      ToPort: 8080

  TranscribingAudiohookLoadBalancerSecurityGroupEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - TranscribingAudiohookLoadBalancerSecurityGroup
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - TranscriberServiceSecurityGroup
          - GroupId
      FromPort: 80
      ToPort: 80

  TranscribingAudiohookLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - FixedResponseConfig:
            ContentType: application/json
            MessageBody: '{"status":403,"message":"This is not a valid endpoint"}'
            StatusCode: '403'
          Type: fixed-response
      LoadBalancerArn:
        Ref: TranscribingAudiohookLoadBalancer
      Port: 80
      Protocol: HTTP
 
  TranscribingAudiohookLoadBalancerListenerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/health/check"
      HealthCheckPort: 80
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'false'
        - Key: deregistration_delay.timeout_seconds
          Value: '180'
      Targets:
        - Id: !Ref WebSocketInstance
          Port: 8080
      UnhealthyThresholdCount: 2
      VpcId: !Ref TranscribingVPC
 
  TranscribingAudiohookLoadBalancerListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: TranscribingAudiohookLoadBalancerListenerTargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !GetAtt WebSocketCloudFrontDistribution.DomainName
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/api/*"
      ListenerArn:
        Ref: TranscribingAudiohookLoadBalancerListener
      Priority: 100
 
  TranscribingAudiohookLoadBalancerListenerRule2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - FixedResponseConfig:
            ContentType: application/json
            MessageBody: '{"status":404,"message":"Resource not found"}'
            StatusCode: '404'
          Type: fixed-response
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !GetAtt WebSocketCloudFrontDistribution.DomainName
      ListenerArn:
        Ref: TranscribingAudiohookLoadBalancerListener
      Priority: 200
   
  TcaDataAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - transcribe.streaming.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: tca-post-call-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${bucket}"
                    - bucket: !Ref S3BucketName
                  - !Sub
                    - "arn:aws:s3:::${bucket}/*"
                    - bucket: !Ref S3BucketName

    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: >-
              Transcribe does not support resource-level permissions and KVS streams are dynamic

  TranscriberServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: audiohook-fargate/service/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId: !Ref TranscribingVPC

  TranscriberServiceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8080
      GroupId:
        Fn::GetAtt:
          - TranscriberServiceSecurityGroup
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - TranscribingAudiohookLoadBalancerSecurityGroup
          - GroupId
      ToPort: 8080

  TranscriberServiceSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to health check
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - TranscriberServiceSecurityGroup
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - TranscribingAudiohookLoadBalancerSecurityGroup
          - GroupId
      ToPort: 80

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "CloudFront OAI"

  CloudFrontOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties: 
      OriginRequestPolicyConfig:
        Name: !Sub ${AWS::StackName}-CloudFrontOriginRequestPolicyConfig
        CookiesConfig: 
          CookieBehavior: none
        HeadersConfig: 
          HeaderBehavior: whitelist
          Headers: 
            - "Sec-WebSocket-Key"
            - "Sec-WebSocket-Version"
            # - "Sec-WebSocket-Protocol"
            # - "Sec-WebSocket-Accept"
            - "Host"
            - "Origin"
            # - "Referer"
            - "audiohook-organization-id"
            - "audiohook-session-id"
            - "audiohook-correlation-id"
            - "x-api-key"
            - "signature-input"
            - "signature"

        QueryStringsConfig: 
          QueryStringBehavior: none

  WebSocketCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub "Web Socket audiohook proxy cloudfront distribution ${AWS::StackName}"
        Origins:
          - Id: audiohook-fargate
            DomainName: !GetAtt TranscribingAudiohookLoadBalancer.DNSName
            CustomOriginConfig: 
              HTTPPort: '80'
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          TargetOriginId: audiohook-fargate
          ViewerProtocolPolicy: https-only
          OriginRequestPolicyId: !Ref CloudFrontOriginRequestPolicy
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          Compress: false

        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 300
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        PriceClass: !Ref CloudFrontPriceClass       
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'

    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W70
            reason: This is using Cloudfront default TLS, can be changed by customer if needed.

  WebSocketInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: WebSocketInstanceRole

  WebSocketInstanceTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref WebSocketLatestImageId
        InstanceType: !Ref WebSocketInstanceType
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 2

  WebSocketInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: '1'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WebSocketInstanceTemplate
        Version: !GetAtt WebSocketInstanceTemplate.LatestVersionNumber
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      IamInstanceProfile:
        Ref: WebSocketInstanceProfile
      SecurityGroupIds:
        - Fn::GetAtt:
            - TranscriberServiceSecurityGroup
            - GroupId
      SubnetId:
        Ref: TranscribingVPCPublicSubnet1Subnet
      Tags:
        - Key: Name
          Value: !Sub 'WebSocketInstance-${AWS::StackName}'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          while fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do sleep 1 ; done
          sudo apt-get install unzip python3-pip jq nodejs npm -y
          curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
          unzip -q  -o awscliv2.zip
          sudo ./aws/install --update
          mkdir -p /opt/aws/
          sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          sudo ln -s -f /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          /usr/local/bin/cfn-init -v  --stack ${AWS::StackName} --resource WebSocketInstance --configsets full_install  --region ${AWS::Region}          
          
          echo export DB_CONNECTION="some DB connection" >> /etc/profile
          echo export DB_USERNAME="my user" >> /etc/profile
          echo export DB_PASSWORD="my password" >> /etc/profile
          echo export REGION=${AWS::Region}
          echo export NODE_ENV='Production' >> /etc/profile
          echo export SERVERHOST='0.0.0.0' >> /etc/profile
          echo export SERVERPORT='8080' >> /etc/profile
          echo export USERPOOL_ID=${UserPoolId} >> /etc/profile
          echo export OUTPUT_BUCKET=${S3BucketName} >> /etc/profile
          echo export RECORDING_FILE_PREFIX=${AudioFilePrefix} >> /etc/profile
          echo export CALL_ANALYTICS_FILE_PREFIX=${CallAnalyticsPrefix} >> /etc/profile
          echo export RAW_FILE_PREFIX='lca-audio-raw' >> /etc/profile
          echo export TCA_DATA_ACCESS_ROLE_ARN=${TcaDataAccessRole.Arn} >> /etc/profile
          echo export TEMP_FILE_PATH='output/' >> /etc/profile
          echo export IS_CONTENT_REDACTION_ENABLED=${IsContentRedactionEnabled} >> /etc/profile
          echo export TRANSCRIBE_LANGUAGE_CODE=${TranscribeLanguageCode} >> /etc/profile
          echo export CONTENT_REDACTION_TYPE=${TranscribeContentRedactionType} >> /etc/profile
          echo export PII_ENTITY_TYPES=${TranscribePiiEntityTypes} >> /etc/profile
          echo export CUSTOM_VOCABULARY_NAME=${CustomVocabularyName} >> /etc/profile
          echo export CUSTOM_LANGUAGE_MODEL_NAME=${CustomLanguageModelName} >> /etc/profile
          echo export KEEP_ALIVE='10000' >> /etc/profile
          echo export TRANSCRIBE_API_MODE=${TranscribeApiMode} >> /etc/profile
          echo export BUFFER_SIZE='128' >> /etc/profile
          echo export IS_TCA_POST_CALL_ANALYTICS_ENABLED='true' >> /etc/profile
          echo export POST_CALL_CONTENT_REDACTION_OUTPUT='redacted' >> /etc/profile
          echo export START_STREAM_RETRIES='5' >> /etc/profile
          echo export START_STREAM_RETRY_WAIT='1000' >> /etc/profile
          echo export KINESIS_STREAM_NAME=${CallDataStreamName} >> /etc/profile
          aws s3 cp s3://${BootstrapBucketBaseName}-${AWS::Region}/${BootstrapS3Prefix}/lca-websocket.zip .
          unzip lca-websocket.zip
          sudo apt-get update && sudo apt-get install -y ca-certificates curl gnupg
          curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
          NODE_MAJOR=20
          echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
          sudo apt-get update && sudo apt-get install nodejs -y            
          npm install
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebSocketInstance --region ${AWS::Region}
          nohup node server.js > server.out 2>&1 &
    DependsOn:
          - WebSocketInstanceDefaultPolicy
          - WebSocketInstanceRole

  WebSocketEIP:
    Type: AWS::EC2::EIP

  WebSocketEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP:
        Ref: WebSocketEIP
      InstanceId:
        Ref: WebSocketInstance

  WebSocketInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ''
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: '2012-10-17'
      ManagedPolicyArns:
        - Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMManagedInstanceCore
  WebSocketInstanceDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Resource:
              - !Sub "arn:aws:s3:::${BootstrapBucketBaseName}-${AWS::Region}"
              - !Sub "arn:aws:s3:::${BootstrapBucketBaseName}-${AWS::Region}/\
                    ${BootstrapS3Prefix}/*"
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - s3:PutObject
              - s3:ListBucket
          - Action:
              - transcribe:DeleteTranscriptionJob
              - transcribe:GetTranscriptionJob
              - transcribe:GetVocabulary
              - transcribe:ListTranscriptionJobs
              - transcribe:ListVocabularies
              - transcribe:StartStreamTranscription
              - transcribe:StartTranscriptionJob
              - transcribe:StartCallAnalyticsStreamTranscription
            Effect: Allow
            Resource: "*"
          - Action:
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
            Effect: Allow
            Resource: "*"
          - Action:
              - kinesis:PutRecord
            Effect: Allow
            Resource:
              - !Sub
                - "arn:${AWS::Partition}:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${streamName}"
                - streamName: !Ref CallDataStreamName
        Version: '2012-10-17'
      PolicyName: WebSocketInstanceDefaultPolicy
      Roles:
        - Ref: WebSocketInstanceRole
